# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Yuqi Chen, Tian Sun
# This file is distributed under the same license as the HuggingDragon's
# Document package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: HuggingDragon's Document \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-19 14:14+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../visualization/trajectory_recovery.ipynb:9
msgid "Visualization of Trajectory Recovery"
msgstr "轨迹还原任务可视化"

#: ../visualization/trajectory_recovery.ipynb:11
msgid ""
"In this tutorial, we show the process of visualizing trajectory recovery "
"tasks using pretrained models."
msgstr "在本教程中，我们将展示使用预训练模型可视化轨迹恢复任务的过程。"

#: ../visualization/trajectory_recovery.ipynb:14
msgid "Step 1: Import necessary packages."
msgstr "第一步：导入必要的Python包"

#: ../visualization/trajectory_recovery.ipynb:38
msgid "Step 2: Load pretrained model."
msgstr "第二步：加载预训练模型"

#: ../visualization/trajectory_recovery.ipynb:40
msgid ""
"In this step, we will first download the checkpoint from Google Drive. "
"Next, the configuration file will be loaded, and the runtime parameters "
"will be obtained from the YAML config."
msgstr "在这一步中，我们首先将从Google Drive下载预训练模型文件。接下来，将加载配置文件，并从YAML配置中获取运行时参数。"

#: ../visualization/trajectory_recovery.ipynb:185
msgid "Step 3: Obtain the outputs"
msgstr "第三步：获取模型输出"

#: ../visualization/trajectory_recovery.ipynb:187
msgid ""
"In this step, we first create a trajectory, and then forward it to the "
"network to obtain the recovered trajectory."
msgstr "在这一步中，我们首先创建一个轨迹，然后将其作为模型的输入，以获取恢复的轨迹。"

#: ../visualization/trajectory_recovery.ipynb:252
msgid "Step 4: Visualization"
msgstr "第四步：可视化"

#: ../visualization/trajectory_recovery.ipynb:254
msgid ""
"We use ``folium`` package to visualize the input trajectory as well as "
"the output trajectory. Orange stars represent the input trajectory, while"
" the purple line is the output trajectory."
msgstr "在这一步中，我们使用``folium``包来可视化输入轨迹和输出轨迹。紫色的圆圈表示输入轨迹，而线条表示输出的轨迹。"

